doc_summary: include('doc_summary')
doc_verbose: include('doc_verbose', required=False)
regwidth: include('equation', required=False)
localparams: list(include('localparam'), required=False)
enums: list(include('enum'), required=False)
typedefs: list(include('typedef'), required=False)
structs: list(include('struct'), required=False)
unions: list(include('union'), required=False)
xactions: list(include('xaction'), required=False)
---
equation: any(str(min=1), int(min=0))
doc_verbose: str(min=3)
doc_summary: str(min=3)
bool_type: any('True', 'False')
empty_str: regex('')
---
localparam_name: regex('^[A-Z][A-Z0-9_]+[A-Z0-9]$', name="valid localparam name. localparams must be at least 3 characters, all caps, start with a letter, and can only contain letters, numbers, and _")
pkg_scoped_localparam_name: regex('^[a-z][a-z0-9_]*[a-z0-9]::[A-Z][A-Z0-9_]+[A-Z0-9]$', name="valid package scoped localparam name. localparams must be at least 3 letters, all caps, start with a letter, and can only contain letters, numbers, and _. The package must be all lowercase and start with a letter")
any_localparam_name: any(include('localparam_name'), include('pkg_scoped_localparam_name'))
verilog_primitive: enum('wire', 'logic', 'wire signed', 'logic signed')
---
localparam:
  name: include('localparam_name')
  width: include('equation', required=False)
  value: include('equation')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
  sv_render_no_width: include('bool_type', required=False)
---
enum_name: regex('^[A-Z][A-Z0-9_]+[A-Z0-9]_E$', name="valid enum name. enums must be at least 3 characters, all caps, start with a letter, only contain letters, numbers, and _, and must end with _E")
enum_prefix_name: regex('^[A-Z][A-Z0-9_]*$', name="valid enum prefix name. enum prefix names must be at least 1 letters, all caps, start with a letter, and only contain letters, numbers, and _")
enum_value_name: regex('^[A-Z0-9][A-Z0-9_]*[A-Z0-9]$', name="valid enum value name. enum value names must be at least 2 letters, all caps, start with a letter or number, and only contain letters, numbers, and _")
pkg_scoped_enum_name: regex('^[a-z][a-z0-9_]*[a-z0-9]::[A-Z][A-Z0-9_]+[A-Z0-9]_E$', name="valid package scoped enum name. enums must be at least 3 letters, all caps, start with a letter, can only contain letters, numbers, and _, and must end with _E. The package must be all lowercase and start with a letter.")
any_enum_name: any(include('enum_name'), include('pkg_scoped_enum_name'))
any_enum_prefix_name: any(include('enum_value_name'), include('empty_str'))
enum:
  name: include('enum_name')
  width: include('equation')
  prefix: include('any_enum_prefix_name', required=False)
  values: list(include('enum_value'))
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
enum_value:
  name: include('enum_value_name')
  value: include('equation', required=False)
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
---
typedef_name: regex('^[a-z][a-z0-9_]+[a-z0-9]_t$', name="valid typedef name. typedefs must be at least 3 characters, all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t.")
any_typedef_name: any(include('typedef_name'), include('pkg_scoped_typedef_name'))
pkg_scoped_typedef_name: regex('^[a-z][a-z0-9_]*[a-z0-9]::[a-z][a-z0-9_]+[a-z0-9]_t$', name="valid package scoped typedef name. typedefs must be at least 3 characters, all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t. The package must be all lowercase and start with a letter.")
typedef:  
  name: include('typedef_name')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
  base_type: any(include('verilog_primitive'), include('any_enum_name'), include('any_typedef_name'), include('any_struct_name'), include('any_union_name'))
  width: include('equation')
---
struct_name: regex('^[a-z][a-z0-9_]+[a-z0-9]_t$', name="valid struct name. structs must be at least 3 characters, all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t.")
addr_macro: regex('^[A-Z][A-Z_]+[A-Z]$',name="valid address generator macros must be all CAPS or underscores and must start and end with a letter")
pkg_scoped_struct_name: regex('^[a-z][a-z0-9_]*[a-z0-9]::[a-z][a-z0-9_]+[a-z0-9]_t$', name="valid package scoped struct name. structs must be at least 3 characters all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t. The package must be all lowercase and start with a letter.")
any_struct_name: any(include('struct_name'), include('pkg_scoped_struct_name'))
struct_field_name: regex('^[a-z][a-z0-9_]*[a-z0-9]$', name="valid struct field name. struct field names must be at least 3 characters, all lowercase, start with a letter, only contain letters, numbers, and _")
default_rdl_property: regex('^default .*?;$', name="vald default rdl property. must start with default and end with ';'")
rdl_property: regex('^.*?;$', name="vald rdl property. must end with ';'")
struct:
  name: include('struct_name')
  addr_macro: include('addr_macro', required=False)
  base_type: any(include('struct_name'), list(include('list_struct_name')), required=False)
  rdl: include("default_rdl_property", required=False)
  fields: list(include('struct_field'))
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
list_struct_name:
  name: include('struct_name')
struct_field:
  name: include('struct_field_name')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
  rdl: include("rdl_property", required=False)
  selectors: list(include('select'), required=False)
  type: any(include('verilog_primitive'), include('any_enum_name'), include('any_struct_name'), include('any_typedef_name'), include('any_union_name'))
  width: any(include('equation'), required=False)
select:
  name: include('struct_field_name')
  select_with: list("values")
  
  
---
union_name: regex('^[a-z][a-z0-9_]+[a-z0-9]_t$', name="valid union name. unions must be at least 3 characters, all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t.")
pkg_scoped_union_name: regex('^[a-z][a-z0-9_]*[a-z0-9]::[a-z][a-z0-9_]+[a-z0-9]_t$', name="valid package scoped union name. unions must be at least 3 characters, all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t. The package must be all lowercase and start with a letter.")
any_union_name: any(include('union_name'), include('pkg_scoped_union_name'))
union_field_name: regex('^[a-z][a-z0-9_]*[a-z0-9]$', name="valid union field name. union field names must be at least 3 characters, all lowercase, start with a letter, only contain letters, numbers, and _")
union:
  name: include('union_name')
  fields: list(include('union_field'))
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
union_field:
  name: include('union_field_name')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
  type: any(include('verilog_primitive'), include('any_localparam_name'), include('any_enum_name'), include('any_struct_name'), include('any_typedef_name'), include('any_union_name'))
  width: any(include('equation'), required=False)
---
xaction:
  name: include('struct_name')
  cycles: list(include('xaction_cycle'))
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
xaction_cycle:
  name: include('struct_field_name')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
  type: any(include('verilog_primitive'), include('any_enum_name'), include('any_struct_name'), include('any_typedef_name'), include('any_union_name'))
  width: any(include('equation'), required=False)
