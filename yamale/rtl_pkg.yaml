doc_summary: include('doc_summary')
doc_verbose: include('doc_verbose', required=False)
localparams: list(include('localparam'), required=False)
enums: list(include('enum'), required=False)
structs: list(include('struct'), required=False)
---
any_value: any(int(min=1), include('any_localparam_name'))
doc_verbose: str(min=3)
doc_summary: str(min=3)
---
localparam_name: regex('^[A-Z0-9_]{3,}$', name="valid localparam name. localparams must be all caps, start with a letter, and can only contain letters, numbers, and _")
pkg_scoped_localparam_name: regex('^[a-z0-9_]{3,}::[A-Z0-9_]{3,}$', name="valid package scoped localparam name. localparams must be all caps, start with a letter, and can only contain letters, numbers, and _. The package must be all lowercase and start with a letter")
any_localparam_name: any(include('localparam_name'), include('pkg_scoped_localparam_name'))
---
localparam:
  name: include('localparam_name')
  width: include('any_value')
  value: include('any_value')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
---
enum_name: regex('^[A-Z0-9_]{3,}_E$', name="valid enum name. enums must be all caps, start with a letter, only contain letters, numbers, and _, and must end with _E")
enum_value_name: regex('^[A-Z0-9_]{3,}$', name="valid enum value name. enum value names must be all caps, start with a letter, and only contain letters, numbers, and _")
pkg_scoped_enum_name: regex('^[a-z0-9_]{3,}::[A-Z0-9_]{3,}_E$', name="valid package scoped enum name. enums must be all caps, start with a letter, can only contain letters, numbers, and _, and must end with _E. The package must be all lowercase and start with a letter.")
any_enum_name: any(include('enum_name'), include('pkg_scoped_enum_name'))
enum:
  name: include('enum_name')
  width: include('any_value')
  values: list(include('enum_value'))
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
enum_value:
  name: include('enum_value_name')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
---
struct_name: regex('^[a-z0-9_]{3,}_t$', name="valid struct name. structs must be all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t.")
pkg_scoped_struct_name: regex('^[a-z0-9_]{3,}::[a-z0-9_]{3,}_t$', name="valid struct name. structs must be all lowercase, start with a letter, only contain letters, numbers, and _, and must end with _t. The package must be all lowercase and start with a letter.")
any_struct_name: any(include('struct_name'), include('pkg_scoped_struct_name'))
struct_field_name: regex('^[a-z0-9_]{3,}$', name="valid struct field name. struct field names must be all lowercase, start with a letter, only contain letters, numbers, and _")
struct:
  name: include('struct_name')
  fields: list(include('struct_field'))
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
struct_field:
  name: include('struct_field_name')
  doc_summary: include('doc_summary')
  doc_verbose: include('doc_verbose', required=False)
  type: any(enum('wire', 'logic'), include('any_localparam_name'), include('any_enum_name'), include('any_struct_name'))
  width: any(include('any_value'), required=False)
