# -*- yaml -*-
---
doc_summary: Example of what a dependent package looks like
localparams:
  - name: NEW_PARAM
    width: test_pkg_a::ANOTHER_PARAM.value
    value: 3
    doc_summary: This should link up to [test_pkg_a::ANOTHER_PARAM]
  - name: MAX_WR_CYCLES
    value: 4
    doc_summary: Maximum number of write cycles allowed for the pipelined write
  - name: WR_WIDTH
    value: 8
    doc_summary: Width of a single write cycle

enums:
  - name: WRITE_TYPE_E
    doc_summary: Specifies how the write should be handled
    width: 3
    values:
      - name: STD
        doc_summary: Standard write, nothing special
      - name: MULTI_WDONE
        doc_summary: Send a wdone for each individual cycle completing
      - name: SINGLE_WDONE
        doc_summary: Send a wdone only for the entire write xaction

typedefs:
  - name: first_defined_type_t
    doc_summary: Use another package's enum as the type and a local localparam as width
    base_type: test_pkg_a::CYCLE_TYPE_E
    width: NEW_PARAM.value
  - name: second_defined_type_t
    doc_summary: Use another package's struct as the type and another packages's localparam as width
    doc_verbose: |
      This verbose doc is several lines in order to demonstrate 
      that we can have a multi-line verbose doc that can be linked through
    base_type: test_pkg_a::hero_write_t
    width: test_pkg_a::DOUBLE_LINK_PARAM.value
  - name: local_item_type_t
    doc_summary: Use this package's struct as the type and an int for a width
    base_type: several_things_t
    width: 2
  - name: type_from_implicit_param_t
    doc_summary: Use an auto-generated localparam in the definition of another YIS type
    base_type: logic
    width: MAX_WR_CYCLES_WIDTH.value

structs:
  - name: several_things_t
    doc_summary: Testing inter-package dependencies within struct fields.
    fields:
      - name: fielda
        doc_summary: width.doc_summary
        type: logic
        width: test_pkg_a::HERO_WIDTH.value
      - name: fieldb
        doc_summary: type.doc_summary
        type: test_pkg_a::hero_write_t
      - name: fieldc
        doc_summary: type.doc_summary
        type: test_pkg_a::CYCLE_TYPE_E
      - name: fieldd
        doc_summary: This summary is different than its base definition
        type: logic
        width: NEW_PARAM.value

  - name: type_links_t
    doc_summary: Link in a local typedef, a scoped typdef, and a scoped enum
    fields:
      - name: first_field
        type: first_defined_type_t
        doc_summary: type.doc_summary
      - name: second_field
        type: second_defined_type_t
        doc_summary: type.doc_summary
        doc_verbose: type.doc_verbose
      - name: third_field
        type: test_pkg_a::CYCLE_TYPE_E
        doc_summary: This is a custom doc summary, not inherited from the type
        doc_verbose: This also a custom verbose doc

  - name: write_cmd_t
    doc_summary: The command cycle of a pipelined write
    fields:
      - name: vld
        type: logic
        width: 1
        doc_summary: This cmd is valid, this is the start of a new pipelined write
      - name: rsvd
        type: logic
        width: test_pkg_a::CYCLE_TYPE_E.width + 2
        doc_summary: Reserved
      - name: num_cycles
        type: logic
        width: clog2(MAX_WR_CYCLES.value - 1)
        doc_summary: Number of cycles for this write. 0 indicates MAX_WRITE_CYCLES, otherwise indicates the regular value
      - name: write_type
        type: WRITE_TYPE_E
        doc_summary: type.doc_summary

  - name: write_data_t
    doc_summary: Data cycle of a pipelined write
    fields:
      - name: cycle_type
        type: test_pkg_a::CYCLE_TYPE_E
        doc_summary: type.doc_summary
      - name: dat
        type: logic
        width: WR_WIDTH.value
        doc_summary: One data cycle

unions:
      
xactions:
  - name: pipelined_write_t
    doc_summary: Defines a pipelined write transaction
    cycles:
      - name: cmd_cycle
        type: write_cmd_t
        doc_summary: type.doc_summary
      - name: dat0
        type: write_data_t
        doc_summary: type.doc_summary
      - name: dat1
        type: write_data_t
        doc_summary: type.doc_summary
      - name: dat2
        type: write_data_t
        doc_summary: type.doc_summary
      - name: dat3
        type: write_data_t
        doc_summary: type.doc_summary
