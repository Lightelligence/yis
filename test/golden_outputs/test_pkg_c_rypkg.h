
// Copyright (c) 2021 Lightelligence
//
// Autogenerated from test/golden_inputs/test_pkg_c.yis
//
// Do Not Edit
//
#ifndef __TEST_PKG_C_YIS_H__
#define __TEST_PKG_C_YIS_H__

#include <stdint.h>


#define ADDR_WIDTH 27           // The default address width
#define ADDR_WIDTH_WIDTH 5           // Width of ADDR_WIDTH
#define ADDR_WIDTH_COUNT_WIDTH 5           // Width to count ADDR_WIDTH items
#define ADDR_WIDTH_WIDTH_ONE 1           // ADDR_WIDTH_WIDTH-wide 1 for incrementers and decrementers
#define RACK_ZAP_ID_E_WIDTH 3           // Width of RACK_ZAP_ID_E
#define ADDR_TYPE_E_WIDTH 1           // Width of ADDR_TYPE_E
#define IS_ZAP_E_WIDTH 1           // Width of IS_ZAP_E
#define NON_ZAP_BLOCK_ID_E_WIDTH 3           // Width of NON_ZAP_BLOCK_ID_E
#define ZAP_BLOCK_ID_E_WIDTH 4           // Width of ZAP_BLOCK_ID_E
#define RACK_BLOCK_ID_E_WIDTH 2           // Width of RACK_BLOCK_ID_E
#define CUP_ID_E_WIDTH 3           // Width of CUP_ID_E
#define CRY_ID_E_WIDTH 7           // Width of CRY_ID_E
#define ICE_ID_E_WIDTH 1           // Width of ICE_ID_E
#define ZAP_ID_T_WIDTH 6           // Width of zap_id_t
#define ADDR_T_WIDTH 27           // Width of addr_t
#define JOB_ADDR_T_WIDTH 19           // Width of umem_addr_t
#define ZAP_CSR_ADDR_T_WIDTH 19           // Width of zap_csr_addr_t
#define ZAP_ADDR_T_WIDTH 26           // Width of zap_addr_t
#define NON_ZAP_ADDR_T_WIDTH 26           // Width of non_zap_addr_t
#define RACK_ADDR_T_WIDTH 23           // Width of rack_addr_t
#define RACK_ID_T_WIDTH 3           // Width of rack_id_t
#define RACK_BLOCK_INST_ID_T_WIDTH 3           // Width of rack_block_inst_id_t
#define QUAD_ID_T_WIDTH 2           // Width of quad_id_t


// The zap id within a rack.
typedef enum {
    ZAP0 = 0,   // Zap 0 within RACK
    ZAP1 = 1,   // Zap 1 within RACK
    ZAP2 = 2,   // Zap 2 within RACK
    ZAP3 = 3,   // Zap 3 within RACK
    ZAP4 = 4,   // Zap 4 within RACK
    ZAP5 = 5,   // Zap 5 within RACK
    ZAP6 = 6,   // Zap 6 within RACK
    ZAP7 = 7,   // Zap 7 within RACK
} RACK_ZAP_ID_E;

// Indicates top-level address type.
typedef enum {
    MEM = 0,   // This is a memory address.
    CSR = 1,   // This is an CSR address.
} ADDR_TYPE_E;

// Indicates a zap address or a non-zap address.
typedef enum {
    NON_ZAP = 0,   // This address targets something outside a zap.
    ZAP = 1,   // This address targets something inside a zap.
} IS_ZAP_E;

// The ID of an individual block in the bag that does not live inside ZAP.
typedef enum {
    LEG_ID = 0,   // LEG
    TAX_ID = 1,   // LEG controller
    EGO_ID = 2,   // EGO controller
    ASH_ID = 4,   // Interrupt Controller
    SIN_ID = 5,   // Lorem ipsum dolor
    RACK_ID = 6,   // One of the non-zap blocks within the RACK
    FOX_ID = 7,   // Sit amet
} NON_ZAP_BLOCK_ID_E;

// A subblock ID inside a ZAP.
typedef enum {
    TRY = 1,   // Consectetur adipiscing
    HORN = 2,   // Zap Miscellaneous Bus Controller
    EYE = 3,   // Eye beams
    PIE_SLICE0 = 4,   // PIE slice 0
    PIE_SLICE1 = 5,   // PIE slice 1
    PIE_SLICE2 = 6,   // PIE slice 2
    PIE_SLICE3 = 7,   // PIE slice 2
    KID = 8,   // Pellentesque eget
    JOB = 9,   // Aliquet lorem
    TIP = 10,   // JOB Bridge
    GET = 11,   // Nulla pharetra velit. Sed eget justo dolor. Proin egestas nulla vitae tempor fringilla. Sed commodo vulputate enim a pulvinar. Receive
    GRE = 12,   // Nulla pharetra velit. Sed eget justo dolor. Proin egestas nulla vitae tempor fringilla. Sed commodo vulputate enim a pulvinar. Transmit
} ZAP_BLOCK_ID_E;

// A block instantiated at RACK-level that is not a zap
typedef enum {
    ICE = 0,   // Sed eget
    CRY = 1,   // Sed lobortis congue Receive
    CUP = 2,   // Sed lobortis congue Transmit
} RACK_BLOCK_ID_E;

// CUP numbering for address generation
typedef enum {
    CUP0 = 0,   // CUPn
    CUP1 = 1,   // CUPn
    CUP2 = 2,   // CUPn
    CUP3 = 3,   // CUPn
    CUP4 = 4,   // CUPn
    CUP5 = 5,   // CUPn
    CUP6 = 6,   // CUPn
    CUP7 = 7,   // CUPn
} CUP_ID_E;

// CRY numbering for address generation
typedef enum {
    CRY0 = 0,   // CRYn
    CRY1 = 1,   // CRYn
    CRY2 = 2,   // CRYn
    CRY3 = 3,   // CRYn
    CRY4 = 4,   // CRYn
    CRY5 = 5,   // CRYn
    CRY6 = 6,   // CRYn
    CRY7 = 7,   // CRYn
    CRY8 = 8,   // CRYn
    CRY9 = 9,   // CRYn
    CRY10 = 10,   // CRYn
    CRY11 = 11,   // CRYn
    CRY12 = 12,   // CRYn
    CRY13 = 13,   // CRYn
    CRY14 = 14,   // CRYn
    CRY15 = 15,   // CRYn
    CRY16 = 16,   // CRYn
    CRY17 = 17,   // CRYn
    CRY18 = 18,   // CRYn
    CRY19 = 19,   // CRYn
    CRY20 = 20,   // CRYn
    CRY21 = 21,   // CRYn
    CRY22 = 22,   // CRYn
    CRY23 = 23,   // CRYn
    CRY24 = 24,   // CRYn
    CRY25 = 25,   // CRYn
    CRY26 = 26,   // CRYn
    CRY27 = 27,   // CRYn
    CRY28 = 28,   // CRYn
    CRY29 = 29,   // CRYn
    CRY30 = 30,   // CRYn
    CRY31 = 31,   // CRYn
    CRY32 = 32,   // CRYn
    CRY33 = 33,   // CRYn
    CRY34 = 34,   // CRYn
    CRY35 = 35,   // CRYn
    CRY36 = 36,   // CRYn
    CRY37 = 37,   // CRYn
    CRY38 = 38,   // CRYn
    CRY39 = 39,   // CRYn
    CRY40 = 40,   // CRYn
    CRY41 = 41,   // CRYn
    CRY42 = 42,   // CRYn
    CRY43 = 43,   // CRYn
    CRY44 = 44,   // CRYn
    CRY45 = 45,   // CRYn
    CRY46 = 46,   // CRYn
    CRY47 = 47,   // CRYn
    CRY48 = 48,   // CRYn
    CRY49 = 49,   // CRYn
    CRY50 = 50,   // CRYn
    CRY51 = 51,   // CRYn
    CRY52 = 52,   // CRYn
    CRY53 = 53,   // CRYn
    CRY54 = 54,   // CRYn
    CRY55 = 55,   // CRYn
    CRY56 = 56,   // CRYn
    CRY57 = 57,   // CRYn
    CRY58 = 58,   // CRYn
    CRY59 = 59,   // CRYn
    CRY60 = 60,   // CRYn
    CRY61 = 61,   // CRYn
    CRY62 = 62,   // CRYn
    CRY63 = 63,   // CRYn
    CRY64 = 64,   // CRYn
    CRY65 = 65,   // CRYn
    CRY66 = 66,   // CRYn
    CRY67 = 67,   // CRYn
    CRY68 = 68,   // CRYn
    CRY69 = 69,   // CRYn
    CRY70 = 70,   // CRYn
    CRY71 = 71,   // CRYn
    CRY72 = 72,   // CRYn
    CRY73 = 73,   // CRYn
    CRY74 = 74,   // CRYn
    CRY75 = 75,   // CRYn
    CRY76 = 76,   // CRYn
    CRY77 = 77,   // CRYn
    CRY78 = 78,   // CRYn
    CRY79 = 79,   // CRYn
    CRY80 = 80,   // CRYn
    CRY81 = 81,   // CRYn
    CRY82 = 82,   // CRYn
    CRY83 = 83,   // CRYn
    CRY84 = 84,   // CRYn
    CRY85 = 85,   // CRYn
    CRY86 = 86,   // CRYn
    CRY87 = 87,   // CRYn
    CRY88 = 88,   // CRYn
    CRY89 = 89,   // CRYn
    CRY90 = 90,   // CRYn
    CRY91 = 91,   // CRYn
    CRY92 = 92,   // CRYn
    CRY93 = 93,   // CRYn
    CRY94 = 94,   // CRYn
    CRY95 = 95,   // CRYn
    CRY96 = 96,   // CRYn
    CRY97 = 97,   // CRYn
    CRY98 = 98,   // CRYn
    CRY99 = 99,   // CRYn
    CRY100 = 100,   // CRYn
    CRY101 = 101,   // CRYn
    CRY102 = 102,   // CRYn
    CRY103 = 103,   // CRYn
    CRY104 = 104,   // CRYn
    CRY105 = 105,   // CRYn
    CRY106 = 106,   // CRYn
    CRY107 = 107,   // CRYn
    CRY108 = 108,   // CRYn
    CRY109 = 109,   // CRYn
    CRY110 = 110,   // CRYn
    CRY111 = 111,   // CRYn
    CRY112 = 112,   // CRYn
    CRY113 = 113,   // CRYn
    CRY114 = 114,   // CRYn
    CRY115 = 115,   // CRYn
    CRY116 = 116,   // CRYn
    CRY117 = 117,   // CRYn
    CRY118 = 118,   // CRYn
    CRY119 = 119,   // CRYn
    CRY120 = 120,   // CRYn
    CRY121 = 121,   // CRYn
    CRY122 = 122,   // CRYn
    CRY123 = 123,   // CRYn
    CRY124 = 124,   // CRYn
    CRY125 = 125,   // CRYn
    CRY126 = 126,   // CRYn
    CRY127 = 127,   // CRYn
} CRY_ID_E;

// ICE Numbering
typedef enum {
    ICE0 = 0,   // ICE 0
} ICE_ID_E;


// ID of a rack
typedef uint8_t rack_id_t;    // 3 bits wide

// ID number for one of the non-zap blocks instantiated at RACK-level
typedef uint8_t rack_block_inst_id_t;    // 3 bits wide

// ID of a quad
typedef uint8_t quad_id_t;    // 2 bits wide


// The ID for a given ZAP
typedef struct _zap_id_t {
    rack_id_t rack_id;    // 3 bits : ID of a rack
    RACK_ZAP_ID_E zap_id;    // 3 bits : Zap ID (Within a rack)
} zap_id_t;

// JOB Addr struct
typedef struct _umem_addr_t {
    uint32_t offset;    // 19 bits : JOB Address Offset
} umem_addr_t;

// Zap CSR Addr Struct
typedef struct _zap_csr_addr_t {
    ZAP_BLOCK_ID_E zap_block_id;    // 4 bits : A subblock ID inside a ZAP.
    uint16_t offset;    // 15 bits : offset into the CSR address space
} zap_csr_addr_t;

// Union of the sub_addr field in zap_addr_t
typedef union _zap_addr_sub_addr_t {
    umem_addr_t umem_addr;    // 19 bits : JOB Addr struct
    zap_csr_addr_t zap_csr_addr;    // 19 bits : Zap CSR Addr Struct
} zap_addr_sub_addr_t;

// A memory address
typedef struct _zap_addr_t {
    ADDR_TYPE_E is_csr;    // 1 bits : Indicates top-level address type.
    zap_id_t zap_id;    // 6 bits : The ID for a given ZAP
    zap_addr_sub_addr_t sub_addr;    // 19 bits : Union of the sub_addr field in zap_addr_t
} zap_addr_t;

// Address for blocks within the RACK
typedef struct _rack_addr_t {
    rack_id_t rack_id;    // 3 bits : ID of a rack
    RACK_BLOCK_ID_E rack_block_id;    // 2 bits : which type of block
    rack_block_inst_id_t rack_block_inst_id;    // 3 bits : Which instance of this block-type
    uint16_t offset;    // 15 bits : offset within this instance's addr space
} rack_addr_t;

// Union for sub_addr field in addr_t
typedef union _non_zap_subaddr_t {
    uint32_t offset;    // 23 bits : offset for cases where this is not a RACK-block
    rack_addr_t rack_addr;    // 23 bits : Address for blocks within the RACK
} non_zap_subaddr_t;

// Non-Zap Addr Struct
typedef struct _non_zap_addr_t {
    NON_ZAP_BLOCK_ID_E non_zap_block_id;    // 3 bits : The ID of an individual block in the bag that does not live inside ZAP.
    non_zap_subaddr_t sub_addr;    // 23 bits : Union for sub_addr field in addr_t
} non_zap_addr_t;

// Union for sub_addr field in addr_t
typedef union _addr_sub_addr_t {
    zap_addr_t zap_addr;    // 26 bits : A memory address
    non_zap_addr_t non_zap_addr;    // 26 bits : Non-Zap Addr Struct
} addr_sub_addr_t;

// A generic address
typedef struct _addr_t {
    IS_ZAP_E is_zap;    // 1 bits : Indicates a zap address or a non-zap address.
    addr_sub_addr_t sub_addr;    // 26 bits : Union for sub_addr field in addr_t
} addr_t;


#define ADDRESS_ZAP_MEM(rack_id, zap_id, offset)    (((ZAP) << 26) | ((MEM) << 25) | ((rack_id) << 22) | ((zap_id) << 19) | ((offset) << 0))
#define ADDRESS_ZAP_CSR(rack_id, zap_id, zap_block_id, offset)    (((ZAP) << 26) | ((CSR) << 25) | ((rack_id) << 22) | ((zap_id) << 19) | ((zap_block_id) << 15) | ((offset) << 0))
#define ADDRESS_NON_ZAP_LEG_ID(offset)    (((NON_ZAP) << 26) | ((LEG_ID) << 23) | ((offset) << 0))
#define ADDRESS_NON_ZAP_TAX_ID(offset)    (((NON_ZAP) << 26) | ((TAX_ID) << 23) | ((offset) << 0))
#define ADDRESS_NON_ZAP_EGO_ID(offset)    (((NON_ZAP) << 26) | ((EGO_ID) << 23) | ((offset) << 0))
#define ADDRESS_NON_ZAP_ASH_ID(offset)    (((NON_ZAP) << 26) | ((ASH_ID) << 23) | ((offset) << 0))
#define ADDRESS_NON_ZAP_SIN_ID(offset)    (((NON_ZAP) << 26) | ((SIN_ID) << 23) | ((offset) << 0))
#define ADDRESS_NON_ZAP_FOX_ID(offset)    (((NON_ZAP) << 26) | ((FOX_ID) << 23) | ((offset) << 0))
#define ADDRESS_NON_ZAP_RACK_ID(rack_id, rack_block_id, rack_block_inst_id, offset)    (((NON_ZAP) << 26) | ((RACK_ID) << 23) | ((rack_id) << 20) | ((rack_block_id) << 18) | ((rack_block_inst_id) << 15) | ((offset) << 0))

#endif // __TEST_PKG_C_YIS_H__