// Copyright (c) {{ year }} Lightelligence
// Description: Memory Wrappers Interface generated from {{ memory.name }}.yis by YIS
{%- set use_qp = 1 -%}
{% for mem in memory.children.values() %}
{% if not mem.gen_deps -%}
{% set global_vars = {} -%}
///////////////////////////////////////////////////////////////////////////////
// name: {{ mem.name }}
// doc_summary: {{ mem.doc_summary }}
{% if mem.doc_verbose -%}
/* doc_verbose: {{ mem.doc_verbose }} */
{%- endif %}
// width: {{ mem.width.equation }}  ==>  {{ mem.width.computed_value }}
// depth: {{ mem.depth.equation }}  ==>  {{ mem.depth.computed_value }}
// ports: {{ mem.ports }}
// prot: {{ mem.prot }}
// sram_cfg: {{mem.sram_cfg}}
// pipe0: {{mem.pipe0}}
// pipe1: {{mem.pipe1}}
// row: {{mem.row}}
// col: {{mem.col}}
// read_ports: {{mem.read_ports}}
// write_ports: {{mem.write_ports}}
// stage0: {{mem.stage0}}
// stage1: {{mem.stage1}}

{% if mem.ports == "1p" -%}
    {%- set ports = {'':' wr|rd'} -%}
    {%- set waddr = 'addr' -%}
    {%- set raddr = 'addr' -%}
    {%- set sramio = {"addr": mem.bawidth} -%}
{%- elif mem.ports == "2p" -%}
    {%- set ports = {'A':'wr', 'B':'rd'} -%}
    {%- set waddr = 'waddr' -%}
    {%- set raddr = 'raddr' -%}
    {%- set sramio = {"waddr": mem.bawidth, "raddr": mem.bawidth} -%}
{%- endif -%}
{%- set t=sramio.update({"wr":1, "wdata":mem.m+mem.r, "rd":1, "rdata":mem.m+mem.r}) -%}
{%- set rports = range(mem.read_ports) -%}
{%- set wports = range(mem.write_ports) -%}
{%- set nports = range(mem.num_ports) -%}

{%- macro init_unused(num_unused_bits) -%}
    {%- set t=global_vars.update({'unused_bit': 0}) %}
    {%- if num_unused_bits -%}
    wire [{{num_unused_bits-1}}:0]  unused;
    wire unused_ok;
    assign unused_ok = |unused;
    {%- endif -%}
{%- endmacro -%}
{%- macro fill_zeros(signal, num_filling_zeros, leading=True) -%}
    {{"{%0d'b0, %s}"|format(num_filling_zeros, signal) if num_filling_zeros else signal}}
{%- endmacro  -%}
{%- macro set(key, val) -%}
    {%- set t=global_vars.update({key:val}) -%}
{%- endmacro -%}
{%- macro get(key) -%}
    {{ global_vars[key] }}
{%- endmacro -%}
{%- macro conn_unused(signal, num_unused_bits, leading=True) -%}
    {{"{unused[%0d:%0d], %s}"|format(global_vars['unused_bit']+num_unused_bits-1,global_vars['unused_bit'], signal) if num_unused_bits else signal }}
    {%- set t=global_vars.update({'unused_bit': global_vars['unused_bit'] + num_unused_bits}) %}
{%- endmacro  -%}
{%- macro trim(num, pattern="_P", condition=1) -%}
    {{pattern|replace("P", num|string) if condition else ''}}
{%- endmacro -%}
{%- macro suffix(num, pattern="_P") -%}
    {{trim(num, pattern, mem.num_ports-1)}}
{%- endmacro -%}
{%- macro array(num, pattern="[P:0]") -%}
    {{trim(num-1, pattern, num-1)}}
{%- endmacro -%}


module {{ mem.module }}(
    {%- for nport in nports -%} {%- set signals = {} -%}
        {%- if nport < mem.read_ports -%}
            {%- set t= signals.update({"rd":1}) -%}
            {%- set t= signals.update({"raddr":mem.awidth}) -%}
            {%- set t= signals.update({"rdata":mem.dwidth}) -%}
        {%- endif -%}
        {%- if nport < mem.write_ports -%}
            {%- set t= signals.update({"wr":1}) -%}
            {%- set t= signals.update({"waddr":mem.awidth}) -%}
            {%- set t= signals.update({"wdata":mem.dwidth}) -%}
        {%- endif -%}

        {%- for signal, swidth in signals.items() %}
    {{"out" if signal in ["rdata","rdata_vld"] else "in"}}put {{array(swidth)}} {{signal}}{{suffix(nport)}},
        {%- endfor -%}
    {%- endfor %}
    // DFT
    input   dft_i_xyz,
    output  dft_o_xyz,
    // prot
    input   prot_i_xyz,
    output  prot_o_xyz,
    input clk
);
    {% set unused_data_bits = mem.col*mem.row*mem.sram.bits-(mem.m+mem.r) if not mem.sram.behav else 0 -%}
    {{ init_unused(unused_data_bits) }}

    typedef struct packed {
        {%- for signal, swidth in sramio.items() %}
        logic {{array(swidth)}} {{signal}};
        {%- endfor %}
    }   sram_io_t;

    //==========================================================================
    // Write/Read in stages
    //--------------------------------------------------------------------------
        // in rewiring
            //  -   data
            {%- set data_i_suffix = "_in" -%}
            {%- set data_o_suffix = "_out" -%}
            {%- for wport in wports %}
            wire [{{mem.m+mem.r-1}}:0] data{{data_i_suffix}}{{suffix(wport)}};
            assign data{{data_i_suffix}}{{suffix(wport)}}[{{mem.m-1}}:0] = wdata{{suffix(wport)}};
            {%- endfor %}
            {% if mem.ports == "1p" -%}//  -   addr
                {%- for nport in nports %}
            wire [{{mem.awidth-1}}:0]  addr{{suffix(nport)}};
            assign addr{{suffix(nport)}} =
                    {%- if (nport < mem.write_ports) and (nport < mem.read_ports) -%}
                wr{{suffix(nport)}} ? waddr{{suffix(nport)}} : raddr{{suffix(nport)}};
                    {%- elif nport < mem.write_ports -%}
                waddr{{suffix(nport)}};
                    {%- elif nport < mem.read_ports -%}
                raddr{{suffix(nport)}};
                    {%- endif -%}
                {%- endfor -%}
            {%- endif %}
        {% if mem.stage0 > 0 -%}// in stage0
            {%- set stage0_suffix = "_from_inp0" -%}
            {%- for nport in nports %} {%- set signals = {} -%} {{set("width", 0)}}
                {%- if nport < mem.read_ports -%}
                    {%- set t= signals.update({"rd":1}) -%}
                    {%- set t= signals.update({ raddr:mem.awidth}) -%}
                {%- endif -%}
                {%- if nport < mem.write_ports -%}
                    {%- set t= signals.update({"wr":1}) -%}
                    {%- set t= signals.update({ waddr:mem.awidth}) -%}
                    {%- set t= signals.update({"data"+data_i_suffix:mem.m+mem.r}) -%}
                {%- endif -%}

                {%- for signal, swidth in signals.items() %} {{set("width", global_vars["width"]+swidth)}}
            wire {{array(swidth)}} {{signal}}{{stage0_suffix}}{{suffix(nport)}};
                {%- endfor %}
            {{mem.pipe_module}} #(.WIDTH({{get("width")}}), .PIPE_STAGES({{mem.stage0}})) in_stage0{{suffix(nport)}} (
                .d({ {%- for signal in signals -%} {{signal                 + suffix(nport)}}{{', ' if not loop.last}} {%- endfor -%} }),
                .q({ {%- for signal in signals -%} {{signal + stage0_suffix + suffix(nport)}}{{', ' if not loop.last}} {%- endfor -%} }),
                .clk(clk)
            );
            {%- endfor %}
        {%- endif %}
        {% if mem.row > 1 -%}// addr decoder
            {%- if mem.ports == "1p" %}
            wire [{{mem.row-1}}:0]    addr_decoder[{{mem.num_ports-1}}:0];
                    {%- if mem.decoder_rotator -%} {%- for nport in nports %}
            assign addr_decoder[{{nport}}] = 1'b1 << addr{{stage0_suffix}}{{suffix(nport)}}[{{mem.awidth-1}}:{{mem.bawidth}}]; {%- endfor -%}
                    {%- endif -%}
            {%- elif mem.ports == "2p" %}
            wire [{{mem.row-1}}:0]    raddr_decoder[{{mem.read_ports-1}}:0];
            wire [{{mem.row-1}}:0]    waddr_decoder[{{mem.write_ports-1}}:0];
                    {%- if mem.decoder_rotator -%} {%- for rport in rports %}
            assign raddr_decoder[{{rport}}] = 1'b1 << raddr{{stage0_suffix}}{{suffix(rport)}}[{{mem.awidth-1}}:{{mem.bawidth}}]; {%- endfor -%} {%- for wport in wports %}
            assign waddr_decoder[{{wport}}] = 1'b1 << waddr{{stage0_suffix}}{{suffix(wport)}}[{{mem.awidth-1}}:{{mem.bawidth}}]; {%- endfor -%}
                    {%- endif -%}
            {%- endif -%}
        {%- endif %}
        // ctrl bits
            wire [{{mem.row-1}}:0] rd_ctrl;
            wire [{{mem.row-1}}:0] wr_ctrl;
            assign rd_ctrl =
                {%- if mem.row > 1 -%} {%- for rport in rports -%}
                    ({{raddr}}_decoder[{{rport}}] & { {{mem.row}}{rd{{stage0_suffix}}{{suffix(rport)}}} }) {{';' if loop.last else '| '}} {%- endfor -%}
                {%- else -%}
                    rd{{stage0_suffix}}{{suffix(0)}};
                {%- endif %}
            assign wr_ctrl =
                {%- if mem.row > 1 -%} {%- for wport in wports -%}
                    ({{waddr}}_decoder[{{wport}}] & { {{mem.row}}{wr{{stage0_suffix}}{{suffix(wport)}}} }) {{';' if loop.last else '| '}} {%- endfor -%}
                {%- else -%}
                    wr{{stage0_suffix}}{{suffix(0)}};
                {%- endif %}
        // ctrl/addr/data mux
            {%- set stage1_suffix = "_to_inp1" if mem.stage1 else "" %}
            sram_io_t     sram_io{{stage1_suffix}} [{{mem.row-1}}:0];
            {%- for row in range(mem.row) %}
            assign sram_io{{stage1_suffix}}[{{row}}].rd = rd_ctrl[{{row}}];
            assign sram_io{{stage1_suffix}}[{{row}}].wr = wr_ctrl[{{row}}];
                {%- if mem.ports == "1p" %}
            assign sram_io{{stage1_suffix}}[{{row}}].addr =
                    {%- if mem.num_ports > 1 -%}
                        {%- for nport in nports %}
                addr_decoder[{{nport}}][{{row}}] ? addr{{stage0_suffix}}{{suffix(nport)}}[{{mem.bawidth-1}}:0] :
                        {%- endfor %}
                'x
                    {%- else -%}
                addr{{stage0_suffix}}{{suffix(0)}}[{{mem.bawidth-1}}:0]
                    {%- endif -%};
                {%- elif mem.ports == "2p" %}
            assign sram_io{{stage1_suffix}}[{{row}}].raddr =
                    {%- if mem.read_ports > 1 -%}
                        {%- for rport in rports %}
                raddr_decoder[{{rport}}][{{row}}] ? raddr{{stage0_suffix}}{{suffix(rport)}}[{{mem.bawidth-1}}:0] :
                        {%- endfor %}
                'x
                    {%- else -%}
                raddr{{stage0_suffix}}{{suffix(0)}}[{{mem.bawidth-1}}:0]
                    {%- endif -%};
            assign sram_io{{stage1_suffix}}[{{row}}].waddr =
                    {%- if mem.write_ports > 1 -%}
                        {%- for wport in wports %}
                waddr_decoder[{{wport}}][{{row}}] ? waddr{{stage0_suffix}}{{suffix(wport)}}[{{mem.bawidth-1}}:0] :
                        {%- endfor %}
                'x
                    {%- else -%}
                waddr{{stage0_suffix}}{{suffix(0)}}[{{mem.bawidth-1}}:0]
                    {%- endif -%};
                {%- endif %}
            assign sram_io{{stage1_suffix}}[{{row}}].wdata =
                {%- if mem.write_ports > 1 -%}
                    {%- for wport in wports %}
                {{waddr}}_decoder[{{wport}}][{{row}}] ? data{{data_i_suffix}}{{stage0_suffix}}{{suffix(wport)}} :
                    {%- endfor %}
                'x
                {%- else -%}
                data{{data_i_suffix}}{{stage0_suffix}}{{suffix(wport)}}
                {%- endif -%};
            {%- endfor %}
        {% if mem.stage1 > 0 -%}// in stage1
            sram_io_t     sram_io [{{mem.row-1}}:0];
            {%- for row in range(mem.row) -%} {{set("width", 0)}} {%- for signal, swidth in sramio.items() -%} {{set("width", global_vars["width"]+swidth)}} {%- endfor %}
            {{mem.pipe_module}} #(.WIDTH({{get("width")}}-{{sramio["rdata"]}}), .PIPE_STAGES({{mem.stage1}})) in_stage1{{suffix(row)}} (
                .d(sram_io{{stage1_suffix}}[{{row}}][{{get("width")}}-1:{{sramio["rdata"]}}]),
                .q(sram_io[{{row}}][{{get("width")}}-1:{{sramio["rdata"]}}]),
                .clk(clk)
            );
            {%- endfor %}
        {%- endif %}

    //==========================================================================
    //  SRAM instance
    //--------------------------------------------------------------------------
        {%- for row in range(mem.row) %}
            {%- for col in range(mem.col) -%}
                {% set col_offset = col*mem.bwidth -%}
                {% set col_delta  = mem.bwidth if (mem.bwidth+col_offset)<=(mem.m+mem.r) else (mem.m+mem.r)-col_offset -%}
        {%- if mem.sram.behav %}
        // behavior mem model
        wire [{{col_delta-1}}:0] data_to_behav_pipe_{{row}}_{{col}};
        {{mem.pipe_module}} #(.WIDTH({{col_delta}}), .PIPE_STAGES({{use_qp}})) u_behav_pipe_{{row}}_{{col}} (
            .d(data_to_behav_pipe_{{row}}_{{col}}),
            .q(sram_io[{{row}}].rdata[{{col_offset+col_delta-1}}:{{col_offset}}]),
            .clk(clk)
        );
        `gumi_{{mem.sram_cfg}} #(.ADDR_WIDTH({{mem.bawidth}}), .DATA_WIDTH({{col_delta}}), .DEPTH({{mem.bdepth}}) ) u_mem_{{row}}_{{col}} (
            .we(sram_io[{{row}}].wr),
            .re(sram_io[{{row}}].rd),
            {% if mem.ports == "1p" -%}
            .waddr(sram_io[{{row}}].addr),
            .raddr(sram_io[{{row}}].addr),
            {% elif mem.ports == "2p" -%}
            .waddr(sram_io[{{row}}].waddr),
            .raddr(sram_io[{{row}}].raddr),
            {% endif -%}
            .wdata(sram_io[{{row}}].wdata[{{col_offset+col_delta-1}}:{{col_offset}}]),
            .rdata(data_to_behav_pipe_{{row}}_{{col}}),
            .clk(clk)
        {%- else %}
        // sram
        `gumi_{{mem.sram_cfg}} u_mem_{{row}}_{{col}} (
            {% set sram_reserve_dp_ports = (mem.ports == "2p") and (mem.sram.sub_family in ['dsl']) -%}
            {% for port, conn in ports.items() -%}
            //  PORT_{{port|upper}}
            //  --
            //   - output
            {% if sram_reserve_dp_ports or 'rd' in ports[port]-%}
            .Q{{"P" if use_qp}}{{port}}({{conn_unused("sram_io[%0d].rdata[%0d:%0d]"|format(row, col_offset+col_delta-1,col_offset), mem.sram.bits-col_delta) if 'rd' in ports[port]}}),
            //   - input
            .PIPEME{{port}}({{"'1" if 'rd' in ports[port] else "'0"}}),
            {% endif -%}
            {% if sram_reserve_dp_ports or 'wr' in ports[port] -%}
            //   - input
            .WE{{port}}({{"sram_io[%0d].wr"|format(row) if mem.ports=="1p" else "'1" if 'wr' in conn else "'0"}}),
            .D{{port}}({{fill_zeros("sram_io[%0d].wdata[%0d:%0d]"|format(row,col_offset+col_delta-1,col_offset), mem.sram.bits-col_delta) if 'wr' in ports[port] else "'0"}}),
            {% endif -%}
            .CLK{{port}}(clk),
            .ME{{port}}(
                {%- for pin in conn.strip().split('|') -%}
                sram_io[{{row}}].{{pin}}{{' | ' if not loop.last}}
                {%- endfor -%}
                ),
            .ADR{{port}}({{fill_zeros("sram_io[%0d].%saddr"|format(row, conn[0].strip()), mem.sram.awidth-mem.bawidth)}}),
            {% endfor -%}
            //  light sleep
            .LS(1'b0)
        {%- endif %}
        );
            {%- endfor -%}
        {%- endfor %}

    //==========================================================================
    // Read out pipeline
    //--------------------------------------------------------------------------
        {% if mem.row > 1 -%}
        // rd_sel_pipe
            {%- for rport in rports %}
            wire [{{mem.awidth-mem.bawidth-1}}:0]   rd_sel{{suffix(rport)}};
            {{mem.pipe_module}} #(.WIDTH({{mem.awidth-mem.bawidth}}), .PIPE_STAGES(1+{{use_qp}}+{{mem.stage1}})) rd_sel_pipe{{suffix(rport)}} (
                .d({{raddr}}{{stage0_suffix}}{{suffix(rport)}}[{{mem.awidth-1}}:{{mem.bawidth}}]),
                .q(rd_sel{{suffix(rport)}}),
                .clk(clk)
            );
            {%- endfor %}
        // rd dout mux
        {%- endif -%}
            {%- set pipe0_suffix = "_to_oup0" if mem.pipe0-use_qp else data_o_suffix %}
            {%- for rport in rports %}
            wire [{{mem.m+mem.r-1}}:0] data{{pipe0_suffix}}{{suffix(rport)}};
            assign data{{pipe0_suffix}}{{suffix(rport)}} = sram_io[{{"rd_sel"+suffix(rport) if mem.row > 1 else "0"}}].rdata;
            {%- endfor %}
        {% if mem.pipe0-use_qp -%}//  out pipe 0
            {%- for rport in rports %}
            wire [{{mem.m+mem.r-1}}:0] data{{data_o_suffix}}{{suffix(rport)}};
            {{mem.pipe_module}} #(.WIDTH({{mem.m+mem.r}}), .PIPE_STAGES({{mem.pipe0}}-{{use_qp}})) pipe0{{suffix(rport)}} (
                .d(data{{pipe0_suffix}}{{suffix(rport)}}),
                .q(data{{data_o_suffix}}{{suffix(rport)}}),
                .clk(clk)
            );
            {%- endfor -%}
        {%- endif %}
        //  out pipe 1
            {%- set pipe1_suffix = "_to_oup1" -%}
            {%- for rport in rports -%} {%- if mem.ecc or mem.parity %}
            wire [{{mem.m-1}}:0] data{{pipe1_suffix}}{{suffix(rport)}}; {%- else -%} {%- set pipe1_suffix = data_o_suffix -%} {%- endif %}
            {{mem.pipe_module}} #(.WIDTH({{mem.m}}), .PIPE_STAGES({{mem.pipe1}})) pipe1{{suffix(rport)}} (
                .d(data{{pipe1_suffix}}{{suffix(rport)}}),
                .q(rdata{{suffix(rport)}}),
                .clk(clk)
            );
            {%- endfor %}

    {% if mem.ecc or mem.parity -%}
    //==========================================================================
    //  Protection
    //--------------------------------------------------------------------------
        //  {{mem.prot|capitalize}}
        //  - gen -
            {%- for wport in wports %}
            {{mem.prot_gen_module}} u_gen{{suffix(wport)}} (
                .{{mem.prot}}_to_sram(data{{data_i_suffix}}{{suffix(wport)}}[{{mem.m+mem.r-1}}:{{mem.m}}]),
                .data_in(wdata{{suffix(wport)}})
            );
            {%- endfor %}
        //  - chk -
            {%- for rport in rports %}
            {{mem.prot_chk_module}} u_chk{{suffix(rport)}} (
                .data_out(data{{pipe1_suffix}}{{suffix(rport)}}),
            {%- if mem.ecc %}
                .single_bit_err(),
                .double_bit_err(),
            {%- endif %}
            {%- if mem.parity %}
                .err(),
            {%- endif %}
                .{{mem.prot}}_from_sram(data{{data_o_suffix}}{{suffix(rport)}}[{{mem.m+mem.r-1}}:{{mem.m}}]),
                .data_from_sram(data{{data_o_suffix}}{{suffix(rport)}}[{{mem.m-1}}:0])
            );
            {%- endfor %}
        //  - hero -

    {%- endif %}

    `ifdef TBV
    {%- for rport in rports %}
        {{mem.pipe_module}} #(.WIDTH(1), .PIPE_STAGES({{mem.stage0+mem.stage1+1+mem.pipe0+mem.pipe1}})) rdata_vld{{suffix(rport)}} (
            .d(rd{{suffix(rport)}}),
            .q(),
            .clk(clk)
        );
        {{mem.pipe_module}} #(.WIDTH({{mem.awidth}}), .PIPE_STAGES({{mem.stage0+mem.stage1+1+mem.pipe0+mem.pipe1}})) raddr_pipe{{suffix(rport)}} (
            .d({{raddr}}{{suffix(rport)}}),
            .q(),
            .clk(clk)
        );
    {%- endfor %}
    `endif  //  TBV

endmodule : {{ mem.module }}

{% endif -%}
{% endfor %}
