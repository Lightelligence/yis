
// Autogenerated from tests/golden_inputs/test_pkg_b.yis by yis (https://github.com/Lightelligence/yis)
//
// Do Not Edit
//
#ifndef __TEST_PKG_B_YIS_H__
#define __TEST_PKG_B_YIS_H__

#include <stdint.h>


#define NEW_PARAM 3           // This should link up to [test_pkg_a::ANOTHER_PARAM]
#define NEW_PARAM_WIDTH 2           // Width of NEW_PARAM
#define NEW_PARAM_COUNT_WIDTH 2           // Width to count NEW_PARAM items
#define NEW_PARAM_WIDTH_ONE 1           // NEW_PARAM_WIDTH-wide 1 for incrementers and decrementers
#define MAX_WR_CYCLES_WIDTH_2 2           // a 2 that is MAX_WR_CYCLES_WIDTH-wide (am implicit localparam generated by YIS)
#define MAX_WR_CYCLES_WIDTH_2_WIDTH 1           // Width of MAX_WR_CYCLES_WIDTH_2
#define MAX_WR_CYCLES_WIDTH_2_COUNT_WIDTH 2           // Width to count MAX_WR_CYCLES_WIDTH_2 items
#define MAX_WR_CYCLES_WIDTH_2_WIDTH_ONE 1           // MAX_WR_CYCLES_WIDTH_2_WIDTH-wide 1 for incrementers and decrementers
#define MAX_WR_CYCLES 4           // Maximum number of write cycles allowed for the pipelined write
#define MAX_WR_CYCLES_WIDTH 2           // Width of MAX_WR_CYCLES
#define MAX_WR_CYCLES_COUNT_WIDTH 3           // Width to count MAX_WR_CYCLES items
#define MAX_WR_CYCLES_WIDTH_ONE 1           // MAX_WR_CYCLES_WIDTH-wide 1 for incrementers and decrementers
#define WR_WIDTH 8           // Width of a single write cycle
#define WR_WIDTH_WIDTH 3           // Width of WR_WIDTH
#define WR_WIDTH_COUNT_WIDTH 4           // Width to count WR_WIDTH items
#define WR_WIDTH_WIDTH_ONE 1           // WR_WIDTH_WIDTH-wide 1 for incrementers and decrementers
#define THIS_IS_ONE 1           // A localparam value of 1
#define THIS_IS_ONE_WIDTH 0           // Width of THIS_IS_ONE
#define THIS_IS_ONE_COUNT_WIDTH 1           // Width to count THIS_IS_ONE items
#define THIS_IS_ONE_WIDTH_ONE 1           // THIS_IS_ONE_WIDTH-wide 1 for incrementers and decrementers
#define WRITE_TYPE_E_WIDTH 3           // Width of WRITE_TYPE_E
#define SEVERAL_THINGS_T_WIDTH 101           // Width of several_things_t
#define TYPE_LINKS_T_WIDTH 128           // Width of type_links_t
#define WRITE_CMD_T_WIDTH 10           // Width of write_cmd_t
#define WRITE_DAT_T_WIDTH 10           // Width of write_dat_t
#define ONE_BIT_FIELD_T_WIDTH 3           // Width of one_bit_field_t
#define FIRST_DEFINED_TYPE_T_WIDTH 6           // Width of first_defined_type_t
#define SECOND_DEFINED_TYPE_T_WIDTH 120           // Width of second_defined_type_t
#define LOCAL_ITEM_TYPE_T_WIDTH 202           // Width of local_item_type_t
#define TYPE_FROM_IMPLICIT_PARAM_T_WIDTH 2           // Width of type_from_implicit_param_t
#define WIDTH_ONE_TYPEDEF_T_WIDTH 1           // Width of width_one_typedef_t
#define WIDTH_ONE_EQN_TYPEDEF_T_WIDTH 1           // Width of width_one_eqn_typedef_t


// Specifies how the write should be handled
typedef enum {
    STD = 1,   // Standard write, nothing special
    MULTI_WDONE = 3,   // Send a wdone for each individual cycle completing
    SINGLE_WDONE = 7,   // Send a wdone only for the entire write xaction
} WRITE_TYPE_E;


// Use another package's enum as the type and a local localparam as width
typedef uint8_t first_defined_type_t;    // 6 bits wide

// Use another package's struct as the type and another packages's localparam as width
typedef uint64_t second_defined_type_t;    // 120 bits wide

// Use this package's struct as the type and an int for a width
typedef uint64_t local_item_type_t;    // 202 bits wide

// Use an auto-generated localparam in the definition of another YIS type
typedef uint8_t type_from_implicit_param_t;    // 2 bits wide

// A logic typedef width of 1
typedef uint8_t width_one_typedef_t;    // 1 bits wide

// A logic typedef width of 1 from an equation
typedef uint8_t width_one_eqn_typedef_t;    // 1 bits wide


// Testing inter-package dependencies within struct fields.
typedef struct _several_things_t {
    uint64_t fielda;    // 36 bits : Width of hero bus around the bag.
    hero_write_t fieldb;    // 60 bits : A struct that wraps all fields needed for a single hero write.
    CYCLE_TYPE_E fieldc;    // 2 bits : Indicates a command type of IDLE, VALID, or DONE.
    uint8_t fieldd;    // 3 bits : This summary is different than its base definition
} several_things_t;

// Link in a local typedef, a scoped typdef, and a scoped enum
typedef struct _type_links_t {
    first_defined_type_t first_field;    // 6 bits : Use another package's enum as the type and a local localparam as width
    second_defined_type_t second_field;    // 120 bits : Use another package's struct as the type and another packages's localparam as width
    CYCLE_TYPE_E third_field;    // 2 bits : This is a custom doc summary, not inherited from the type
} type_links_t;

// The command cycle of a pipelined write
typedef struct _write_cmd_t {
    uint8_t vld;    // 1 bits : This cmd is valid, this is the start of a new pipelined write
    uint8_t rsvd;    // 4 bits : Reserved
    uint8_t num_cycles;    // 2 bits : Number of cycles for this write. 0 indicates MAX_WRITE_CYCLES, otherwise indicates the regular value
    WRITE_TYPE_E write_type;    // 3 bits : Specifies how the write should be handled
} write_cmd_t;

// Data cycle of a pipelined write
typedef struct _write_dat_t {
    CYCLE_TYPE_E cycle_type;    // 2 bits : Indicates a command type of IDLE, VALID, or DONE.
    uint8_t dat;    // 8 bits : One data cycle
} write_dat_t;

// Struct to hold 1-bit bit fields to make sure the 1-bit rendering is correct
typedef struct _one_bit_field_t {
    uint8_t vld;    // 1 bits : This field should be rendered as bare logic without anything else
    uint8_t new_bit_field;    // 1 bits : This field should be rendered to just a bare logic with the equation in comments
    uint8_t simple_bit_field;    // 1 bits : This field should be rendered to just a bare logic with the equation in comments
} one_bit_field_t;

// Defines a pipelined write transaction
typedef struct _pipelined_write_t {
    write_cmd_t cmd_cycle;    // 10 bits : The command cycle of a pipelined write
    write_dat_t dat0;    // 10 bits : Data cycle of a pipelined write
    write_dat_t dat1;    // 10 bits : Data cycle of a pipelined write
    write_dat_t dat2;    // 10 bits : Data cycle of a pipelined write
    write_dat_t dat3;    // 10 bits : Data cycle of a pipelined write
} pipelined_write_t;



#endif // __TEST_PKG_B_YIS_H__